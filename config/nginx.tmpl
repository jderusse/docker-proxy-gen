{{ define "upstream" }}
    {{ if .Address }}
        {{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
        {{ if and .Container.Node.ID .Address.HostPort }}
            # {{ .Container.Node.Name }}/{{ .Container.Name }}
            server {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }};
        {{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
        {{ else }}
            # {{ .Container.Name }}
            server {{ .Address.IP }}:{{ .Address.Port }};
        {{ end }}
    {{ else }}
        # {{ .Container.Name }}
        server {{ .Container.IP }} down;
    {{ end }}
{{ end }}

{{ define "host" }}
#Â Host {{ .Container.Name }}
upstream {{ .Host }} {
    {{ $addrLen := len .Container.Addresses }}
    {{/* If only 1 port exposed, use that */}}
    {{ if eq $addrLen 1 }}
        {{ $address := index .Container.Addresses 0 }}
        {{ template "upstream" (dict "Container" .Container "Address" $address) }}
    {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
    {{ else }}
        {{ $port := coalesce .Container.Env.VIRTUAL_PORT "80" }}
        {{ $address := where .Container.Addresses "Port" $port | first }}
        {{ template "upstream" (dict "Container" .Container "Address" $address) }}
    {{ end }}
}
server {
    server_name {{ .Host }};
    location / {
        proxy_pass http://{{ .Host }};
    }
}
{{ end }}

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';

access_log /proc/self/fd/1 vhost;
error_log /proc/self/fd/2;

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

server {
    server_name _; # This is just an invalid value which will never trigger on a real hostname.
    listen 80;
    return 503;
}

{{ $host := or ($.Env.HOST) "docker" }}
{{ $skip_compose_project := or ($.Env.SKIP_COMPOSE_PROJECT) "" }}
{{ $skip_compose_service := or ($.Env.SKIP_COMPOSE_SERVICE) "" }}
{{ range $index, $container := $ }}
    {{ $host_part := split $container.Name "_" }}
    {{ $host_part_len := len $host_part }}
    {{ if eq $host_part_len 3 }}
        {{ $last := (index $host_part 2) }}
        {{ if eq $last "1" }}
            {{ if $skip_compose_project }}
                {{ if $skip_compose_service }}
                    {{ template "host" (dict "Container" $container "Host" (print $host)) }}
                {{ else }}
                    {{ template "host" (dict "Container" $container "Host" (print (index $host_part 1) "." $host)) }}
                {{ end }}
            {{ else }}
                {{ if $skip_compose_service }}
                    {{ template "host" (dict "Container" $container "Host" (print (index $host_part 0) "." $host)) }}
                {{ else }}
                    {{ template "host" (dict "Container" $container "Host" (print (index $host_part 1) "." (index $host_part 0) "." $host)) }}
                {{ end }}
            {{ end }}
        {{ else }}
            {{ template "host" (dict "Container" $container "Host" (print $container.Name "." $host)) }}
        {{ end }}
    {{ else }}
        {{ template "host" (dict "Container" $container "Host" (print $container.Name "." $host)) }}
    {{ end }}
{{ end }}
